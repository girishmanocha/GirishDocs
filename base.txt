package base;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Duration;
import java.util.Properties;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import io.github.bonigarcia.wdm.WebDriverManager;
import io.github.bonigarcia.wdm.managers.OperaDriverManager;

public class Base {
	public static WebDriver driver;
	public static Properties prop;
	static {

		try {
			FileInputStream file = new FileInputStream("TestData/Testdata.properties");
			prop = new Properties();
			prop.load(file);

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void launchBrowser(String browserName) {
		if (browserName.equalsIgnoreCase("chrome")) {
			WebDriverManager.chromedriver().setup();
			driver = new ChromeDriver();
			driver.get(prop.getProperty("Url"));

		} else if (browserName.equalsIgnoreCase("firefox")) {
			WebDriverManager.firefoxdriver().setup();
			driver = new FirefoxDriver();
			driver.get(prop.getProperty("Url"));

		} else if (browserName.equalsIgnoreCase("Opera")) {
			WebDriverManager.operadriver().setup();
			driver = (WebDriver) new OperaDriverManager();
			driver.get(prop.getProperty("Url"));

		} else if (browserName.equalsIgnoreCase("Edge")) {
			WebDriverManager.edgedriver().setup();
			driver = new EdgeDriver();
			driver.get(prop.getProperty("Url"));

		} else if (browserName.equalsIgnoreCase("Internet Explorer")) {
			WebDriverManager.iedriver().setup();
			driver = new InternetExplorerDriver();
			driver.get(prop.getProperty("Url"));

		} else {
			System.out.println("Invalid Browser Name");
		}
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(15));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));

		WebElement Acptcoockies = driver.findElement(By.xpath("//button[@id='onetrust-accept-btn-handler']"));
		waitforElementClickable(Acptcoockies, 10);
		try {
			Acptcoockies.click();
		} catch (Exception e) {
			Executerclick(Acptcoockies);
		}
		WebElement over18 = driver.findElement(
				By.xpath("(//button[@class='button-root_highPriority-3u6 button-root-16x clickable-root-2gB'])[17]"));

		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(5));

		try {
			over18.click();
		} catch (Exception e) {
			Executerclick(over18);
		}

	}

	public void Actionclass(WebElement ele, String value) {

		Actions A = new Actions(driver);
		A.moveToElement(ele).build().perform();
		A.click(ele).build().perform();
		A.doubleClick().build().perform();
		A.sendKeys(value);
	}

	public void Executerclick(WebElement Ele) {
		JavascriptExecutor jsclick = (JavascriptExecutor) driver;
		jsclick.executeScript("arguments[0].click();", Ele);

	}

	public void SelectByVisibletext(WebElement Ele, String Value) {
		Select S = new Select(Ele);
		S.selectByVisibleText(Value);
	}

	public void SelectByVisiblIndex(WebElement Ele, int Value) {
		Select S = new Select(Ele);
		S.selectByIndex(Value);
	}

	public void waitforexpectedelement(WebElement ele, int timeout) {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeout));
		wait.until(ExpectedConditions.visibilityOf(ele));
	}

	public void waitforElementClickable(WebElement ele, int timeout) {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeout));
		wait.until(ExpectedConditions.elementToBeClickable(ele));
	}

	public void select_jspopup(int timeout) {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeout));
		wait.until(ExpectedConditions.alertIsPresent());
		Alert a = driver.switchTo().alert();
		a.accept();
	}

	public void GetScreenShot() {
		TakesScreenshot Ts = (TakesScreenshot) driver;
		File scrFile = Ts.getScreenshotAs(OutputType.FILE);
		try {
			FileUtils.copyFile(scrFile, new File("Screenshots/" + System.currentTimeMillis() + ".png"));
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public void ValidationByVisibleText(String et , String at ) {
		assert(et.equals(at));

	}

	public void validation(boolean B, WebElement Ele) {
		assert (Ele.isDisplayed());
	}

}
